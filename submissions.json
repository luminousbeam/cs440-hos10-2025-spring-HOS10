[
  {
    "title": "Therac-25 Radiation Overdose Accidents",
    "description": "Therac-25 was a dual-mode medical linear accelerator (LINAC) used for cancer radiation therapy. Its control software accepted operator-entered parameters (beam energy, dosage, field size), sequenced hardware interlocks, and managed beam delivery. In six accidents between 1985\u20131987, race conditions and removed hardware safeties allowed massive overdoses of radiation, causing severe injuries and deaths.",
    "objectives": "1. Correctness: Delivered dose must exactly match the prescribed treatment plan under all input scenarios.\r\n2. Fail-Safe Behavior: Any invalid input or hardware fault immediately locks out beam activation and raises an unambiguous alarm.\r\n3. Concurrency Robustness: Concurrent keystrokes, interrupts, or rapid operator actions cannot bypass safety checks or corrupt internal state.\r\n",
    "roles": "QA Engineer",
    "standards": "ISO/IEC 25010",
    "test_plan": "1. Unit Tests  \r\n   \u2013 Verify dose-calculation functions across nominal, boundary, and extreme values.  \r\n\r\n2. Concurrency & Race-Condition Tests  \r\n   \u2013 Automate rapid key-entry sequences and overlapping interrupts to confirm safety checks never skipped.  \r\n\r\n3. Interlock Integration Tests  \r\n   \u2013 Using a hardware simulator, trigger door-open, coolant-fail, or beam-position faults mid-treatment and verify immediate beam termination and alarm.  \r\n\r\n4. Fault-Injection Testing  \r\n   \u2013 Corrupt communication packets between CPU and beam-forming assembly to ensure error detection, logging, and fail-safe shutdown.  \r\n\r\n5. Regression Suite  \r\n   \u2013 After each code change, run the full historical test suite (including the original \u201cmode-switch\u201d scenario) to detect regressions.  \r\n\r\n6. User Acceptance Testing  \r\n   \u2013 Therapists perform mock treatments in dry-run mode to validate UI workflows, parameter validation, and interlock indicators.",
    "defect_management": "All defects logged in Jira with severity levels (Critical, High, Medium, Low).  \r\nTriage meetings twice weekly to assign ownership and track SLA for fixes.  \r\nRoot-cause analysis for every Critical/High defect, with corrective-action items traced.  \r\nMonthly metrics review (defect density, MTTR, reopen rates).",
    "reviews": "- Weekly peer code reviews using a defined checklist (focus on concurrency, interlocks).  \r\n- Formal design-review meetings at each lifecycle milestone (requirements, architecture, detailed design).  \r\n- Quarterly safety audits by the Safety Officer, including FMEA updates.  \r\n- Regulatory audit readiness reviews per IEC 62304 and FDA guidelines.",
    "supplier_control": "- Hardware-vendor qualification: require safety-critical component certificates and change-control logs.  \r\n- Third-party library vetting: maintain SBOM and conduct vulnerability scans on all external code.  \r\n- Configuration management: strict version control of software and hardware firmware, with signed releases for deployment.",
    "references": "https://en.wikipedia.org/wiki/Therac-25\r\nhttps://dl.acm.org/doi/10.1145/69775.69927\r\nhttps://spectrum.ieee.org/therac-25-accidents\r\nhttps://hackaday.com/2016/03/01/killed-by-a-machine-the-therac-25/",
    "purpose": "To ensure that Therac-25 software delivers cancer-treatment doses correctly and safely by defining clear quality objectives, establishing accountable roles, applying industry standards, and executing a comprehensive test strategy that prevents overdose accidents and meets regulatory requirements."
  }
]